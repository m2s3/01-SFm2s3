public class XEmailManager  
{
    
    public void sendTheEmail( String replyAddress, String[] bunchOfAddresses, String[] bunchOfSubjectTags, String[] bunchOfMsgBodys, Integer numberOfSeparateEmails ) 
   {
       // https://salesforce.stackexchange.com/questions/25184/single-email-limit-exceeded-what-does-it-mean      // A Dev Edition org has a single email limit of 15 messages/day. (assuming 1 recipient per email)
       // https://www.soliantconsulting.com/blog/how-to-avoid-governor-limits-with-sendemail-in-apex

     List<Messaging.SingleEmailMessage> theEmails = new List<Messaging.SingleEmailMessage>();
  
     for( Integer i = 0; i < numberOfSeparateEmails; i++ )
     {
         List<String> toAddress = new List<String>(); // setToAddresses will only accept a List (array)
         toAddress.add(bunchOfAddresses.get(i));
         String subjectTag = bunchOfSubjectTags.get(i);
         String msgBody = bunchOfMsgBodys.get(i);

         Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
         mail.setToAddresses( toAddress ); // only takes a List (array) as noted above
         mail.setReplyTo( replyAddress );
         mail.setSenderDisplayName('My Company Email');
        mail.setSubject(subjectTag);
        //mail.setPlainTextBody( msgBody );
        mail.setHtmlBody( msgBody );
	    // or
        //mail.setSubject('whatever my subject task '); 
        //mail.setHtmlBody('Hello, <br/><br/>This is the test mail that you generated. 	<br/>The Email Id for which this mail was generated by '+toMail+'<br/><br/>Regards<br/> Developer');	
        //System.debug('0001: mail='+mail);
         theEmails.add(mail);
     }//!for 

     //System.debug('0010: theEmails=' + theEmails);
     List<Messaging.Email> allMails = new List<Messaging.Email>();
     for( Integer j = 0; j < theEMails.size(); j++ )
     {
         allMails.add(theEmails.get(j));
     }     
     System.debug('0020: allMails=' + allMails);
       
     Messaging.SendEmailResult[] results = Messaging.sendEmail( allMails );
  
     List<Messaging.SendEmailError> errors = new List<Messaging.SendEmailError>();
     String emailErrorReport;
     for( Messaging.SendEmailResult currentResult : results ) 
     {
          errors = currentResult.getErrors();
          if( null != errors ) 
	      {
              for( Messaging.SendEmailError currentError : errors ) 
	         {
		          emailErrorReport = emailErrorReport + '(' + currentError.getStatusCode() + ') ' + currentError.getMessage() + '\r' ;
                  System.debug('emailErrorReport=' + emailErrorReport);
             }
          }
      }//!for

   }//| sendTheEmail
}//|class